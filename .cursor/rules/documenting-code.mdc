---
description: 
globs: *.tsx,*.ts,*.js,*.jsx
alwaysApply: false
---
# TypeScript Inline Documentation Style

## Description
Standardize documentation for TypeScript projects using structured JSDoc blocks for both entities and their properties, while avoiding unnecessary duplication of type information. This rule is designed to improve developer experience through IDE tooltips and maintainable inline documentation.

## Rule

When documenting TypeScript code, follow these conventions:

### 1. JSDoc Blocks for Top-Level Entities
- Use `/** ... */` JSDoc blocks **above all functions, classes, types, and interfaces**.
- Each block should describe **what the entity is** and **what it is used for**.
- Do **not** include `@param`, `@returns`, or `@property` tags â€” we rely on TypeScript type definitions.

### 2. JSDoc Comments for Properties
- Inside interfaces and type aliases, use `/** ... */` comments **above each property**.
- These comments should **briefly describe the property's purpose** in one line.
- This ensures that descriptions appear in IDE tooltips and documentation popups.

### 3. Inline Comments for Logic
- Use `//` inline comments in implementation code to explain:
  - Complex or non-obvious logic
  - Assumptions or intent
  - Side effects or workaround decisions

### 4. Tone and Audience
- Write comments as if you're explaining the code to a future colleague unfamiliar with this codebase.
- Be clear and concise, focusing on *why* something exists or behaves in a particular way.

## Examples

```ts
/**
 * Represents a configuration object for the email service.
 * Used to control connection and retry behavior.
 */
interface EmailConfig {
  /** Mail server hostname */
  host: string;
  /** Connection port */
  port: number;
  /** Whether to use a secure connection */
  useTLS: boolean;
}

/**
 * Sends an email using the provided configuration.
 * Handles connection retries internally.
 */
function sendEmail(config: EmailConfig) {
  // Retry logic is handled here in case of transient failures
  ...
}